{"version":3,"sources":["data/fetchData.js","util/getMinMax.js","util/mapData.js","components/regionDropdown.js","App.js","serviceWorker.js","index.js"],"names":["FetchOwidData","initUrl","useState","url","setUrl","data","setData","regions","setRegions","isLoading","setLoading","isError","setError","useEffect","a","Papa","parse","download","header","complete","results","errors","length","map","error","console","log","regionsList","Object","keys","shift","fetchData","getMinMax","arr","min","max","i","isNaN","mapData","low1","high1","low2","high2","point","CountryToggle","React","forwardRef","ref","children","onClick","Button","href","e","preventDefault","RegionMenu","style","className","labeledBy","value","setValue","aria-labelledby","FormControl","autoFocus","placeholder","onChange","target","Children","toArray","filter","child","props","toLowerCase","startsWith","RegionDropdown","callback","setRegion","sendRegionToParent","region","key","Dropdown","onSelect","event","Toggle","as","id","Menu","Item","eventKey","oscTypes","App","regionData","setRegionData","minAmount","setMinAmount","maxAmount","setMaxAmount","visualize","setVisualize","animation","setAnimation","currentAmt","setCurrentAmt","currentDate","setCurrentDate","pitch","setPitch","oscSelection","setOscSelection","minMidiPitch","setMinMidiPitch","maxMidiPitch","setMaxMidiPitch","bpm","setBpm","synth","useRef","options","oscillator","type","current","Tone","toMaster","initializeRegionData","newRegion","selectedRegionData","amounts","line","push","date","amount","parseInt","index","entry","minMax","convertEntryToMidi","mapped","Math","floor","playMidiNote","midiNote","triggerAttackRelease","handleInput","setStateFunction","newValue","ButtonGroup","selectedRegion","variant","cancel","notes","note","pattern","time","values","start","sonifyData","height","onMouseLeave","colorRange","stroke","x","y","color","sanitizeData","onNearestX","onValueClick","title","left","aria-label","InputGroup","Prepend","Text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f2c0c92e.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\r\nimport Papa from 'papaparse';\r\n\r\n/*\r\n  Fetches data from Our World In Data at the requested URL.\r\n  Amount specifies how many lines of CSV file to parse.\r\n\r\n  Modeled after: https://www.robinwieruch.de/react-hooks-fetch-data\r\n*/\r\nconst FetchOwidData = (initUrl) => {\r\n  const [url, setUrl] = useState(initUrl);\r\n  const [data, setData] = useState([]);\r\n  const [regions, setRegions] = useState([]);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [isError, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      setError(false);\r\n\r\n      try {\r\n        Papa.parse(url, {\r\n          download: true,\r\n          header: true,  // uses the header to convert CSV into JSON\r\n          \r\n          // Callback function called once PapaParser finishes parsing\r\n          complete: (results) => {\r\n            if (results.errors.length > 0) {\r\n              results.errors.map(error => (console.log(error)));\r\n            }\r\n            \r\n            //console.log(results.data);\r\n            setData(results.data);\r\n\r\n            let regionsList = Object.keys(results.data[0]);\r\n            regionsList.shift();  // removes the first element 'date'\r\n            //console.log(regionsList);\r\n            setRegions(regionsList);\r\n          }\r\n        })\r\n      } catch (error) {\r\n        console.log(error);\r\n        setError(true);\r\n      };\r\n\r\n      setLoading(false);\r\n    }\r\n    \r\n    // Call the above function\r\n    fetchData();\r\n\r\n  }, [url,]);\r\n  \r\n  // Returned as state\r\n  return [{ data, regions, isLoading, isError }, setUrl];\r\n}\r\n\r\nexport default FetchOwidData;","/**\r\n * Finds the minimum and maximum of an array\r\n * @param {Array} arr array to find min/max\r\n * @returns object { min: [min], max: [max] }\r\n */\r\nconst getMinMax = arr => {\r\n  let min = arr[0];\r\n  let max = arr[0];\r\n  let i = arr.length;\r\n\r\n  while (i--) {\r\n    if (isNaN(arr[i])) continue;\r\n    min = arr[i] < min ? arr[i] : min;\r\n    max = arr[i] > max ? arr[i] : max;\r\n  }\r\n  \r\n  return { min, max };\r\n}\r\n\r\nexport default getMinMax;\r\n\r\n","/**\r\n * Maps a point of data from one set of bounds to another\r\n * @param {*} low1 lower bound of range 1\r\n * @param {*} high1 upper bound of range 1\r\n * @param {*} low2 lower bound of range 2\r\n * @param {*} high2 upper bound of range 2\r\n * @param {*} point point in range 1 to map from range 1 to range 2\r\n */\r\nconst mapData = (low1, high1, low2, high2, point) => {\r\n  let range1 = high1 - low1;\r\n  let range2 = high2 - low2;\r\n\r\n  let pointPosition = point - low1;\r\n  let ratio = pointPosition / range1;\r\n\r\n  return low2 + range2 * ratio;\r\n}\r\n\r\nexport default mapData;","import React, {useState} from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport './regionDropdown.css';\r\n\r\n// Search function for dropdown taken from:\r\n// https://react-bootstrap.github.io/components/dropdowns/#custom-dropdown-components\r\n\r\n/**\r\n * Button that toggles visibility of countries\r\n */\r\nconst CountryToggle = React.forwardRef(({children, onClick}, ref) => (\r\n  <Button\r\n    href=''\r\n    ref={ref}\r\n    onClick={(e) => {\r\n      e.preventDefault();\r\n      onClick(e);\r\n    }}\r\n  >\r\n    {children}\r\n  </Button>\r\n));\r\n\r\n/**\r\n * Menu that lists all countries\r\n */\r\nconst RegionMenu = React.forwardRef(\r\n  ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\r\n    const [value, setValue] = useState('');\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={style}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <FormControl\r\n          autoFocus\r\n          className='mx-3 my-2 w-auto'\r\n          placeholder='Type to filter...'\r\n          onChange={(e) => setValue(e.target.value)}\r\n          value={value}\r\n        />\r\n        <ul className='list-unstyled'>\r\n          {React.Children.toArray(children).filter(\r\n            (child) =>\r\n              !value || child.props.children.toLowerCase().startsWith(value),\r\n          )}\r\n        </ul>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\n\r\n/**\r\n * Dropdown that displays regions and sends selection to parent component\r\n * @param regions array of region names (strings)\r\n * @param callback function from parent component that returns selected region \r\n */\r\nconst RegionDropdown = ({regions, callback}) => {\r\n  const [region, setRegion] = useState('');\r\n\r\n  const handleChange = event => {\r\n    setRegion(regions[event]);\r\n    sendRegionToParent(regions[event]);\r\n  }\r\n\r\n  const sendRegionToParent = region => {\r\n    callback(region);\r\n  }\r\n\r\n  let key = 0;\r\n  return (\r\n    <div>\r\n        <Dropdown onSelect={handleChange}>\r\n          <Dropdown.Toggle as={CountryToggle} id='dropdown-custom-components'>\r\n            Choose country \r\n          </Dropdown.Toggle>\r\n\r\n          <Dropdown.Menu as={RegionMenu} className='dropdown-scroll'>\r\n            {regions.map(region => (\r\n              <Dropdown.Item \r\n                eventKey={key++}\r\n                key={key} \r\n              >\r\n                {region}\r\n              </Dropdown.Item>\r\n            ))}\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default RegionDropdown;","import React, {useState, useRef, useEffect} from 'react';\r\nimport './App.css';\r\n\r\n// Tone.js imports\r\nimport * as Tone from 'tone';\r\n\r\n// react-vis imports\r\nimport {\r\n  FlexibleWidthXYPlot, \r\n  XAxis, \r\n  YAxis, \r\n  VerticalBarSeries, \r\n  HorizontalGridLines,\r\n  VerticalGridLines,\r\n} from 'react-vis';\r\n\r\n// React-Bootstrap imports\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\n\r\n// Function imports\r\nimport FetchOwidData from './data/fetchData';\r\nimport getMinMax from './util/getMinMax';\r\nimport mapData from './util/mapData';\r\n\r\n// Components\r\nimport RegionDropdown from './components/regionDropdown';\r\n\r\n// Default pitch\r\nconst defaultPitch = 60;\r\n\r\n// Default BPM\r\nconst defaultBpm = 999;\r\n\r\n// Default MIDI parameters\r\nconst defaultMinMidi = 36;\r\nconst defaultMaxMidi = 96;\r\n\r\n// Default oscillator selection\r\nconst defaultOscSelection = 1;\r\n\r\n// All oscillator types\r\nconst oscTypes = [\r\n  'sine',\r\n  'triangle',\r\n  'square',\r\n  'sawtooth',\r\n];\r\n\r\n// URL to fetch data\r\nconst url = 'https://covid.ourworldindata.org/data/ecdc/total_cases.csv';\r\n\r\nconst App = () => {\r\n  // Data state variables\r\n  const [\r\n    { data, regions, isLoading, isError }, \r\n    // fetchData  // commenting out to stop lint errors\r\n  ] = \r\n    FetchOwidData(url);\r\n  const [region, setRegion] = useState('');\r\n  const [regionData, setRegionData] = useState([]);\r\n  const [minAmount, setMinAmount] = useState(0);\r\n  const [maxAmount, setMaxAmount] = useState(0);\r\n  const [visualize, setVisualize] = useState(true);\r\n  const [animation, setAnimation] = useState(false);\r\n  const [currentAmt, setCurrentAmt] = useState(-1);\r\n  const [currentDate, setCurrentDate] = useState('');\r\n\r\n  // Sonification state variables\r\n  const [pitch, setPitch] = useState(defaultPitch);\r\n  const [oscSelection, setOscSelection] = useState(defaultOscSelection);\r\n  const [minMidiPitch, setMinMidiPitch] = useState(defaultMinMidi);\r\n  const [maxMidiPitch, setMaxMidiPitch] = useState(defaultMaxMidi);\r\n  const [bpm, setBpm] = useState(defaultBpm);\r\n\r\n  // Synth (with initialization)\r\n  const synth = useRef(null);\r\n  useEffect(() => {\r\n    // Set oscillator type and initialize synth\r\n    const options = {oscillator: {\r\n      type: oscTypes[oscSelection],\r\n    }};\r\n    synth.current = new Tone.Synth(options).toMaster();\r\n  });\r\n\r\n  /**\r\n   * Updates state variables with region from dropdown\r\n   * @param {string} selectedRegion region from dropdown component\r\n   */\r\n  const initializeRegion = (selectedRegion) => {\r\n    setRegion(selectedRegion);\r\n    initializeRegionData(selectedRegion);\r\n  };\r\n\r\n  /**\r\n   * Sets region data and min/max pitches using region data\r\n   * @param {string} newRegion selected region from dropdown\r\n   */\r\n  const initializeRegionData = newRegion => {\r\n    let selectedRegionData = [];\r\n    let amounts = [];\r\n\r\n    // Populate region data and amounts\r\n    let key = 0;\r\n    for (var line of data) {\r\n      selectedRegionData.push(\r\n        { \r\n          date: line['date'], \r\n          amount: parseInt(line[newRegion]),\r\n          index: key++\r\n        }\r\n      );\r\n      \r\n      amounts.push(parseInt(line[newRegion])); \r\n    }\r\n\r\n    selectedRegionData.filter(entry => !isNaN(entry.amount));\r\n    setRegionData(selectedRegionData);\r\n    \r\n    let minMax = getMinMax(amounts.filter(\r\n      amount => !isNaN(amount)\r\n    ));\r\n\r\n    setMinAmount(minMax.min);\r\n    setMaxAmount(minMax.max);\r\n  };\r\n\r\n  /**\r\n   * Maps a point of data to a MIDI note using min/max amounts kept in state\r\n   * @param {int} amount data to map\r\n   * @returns {int} MIDI note\r\n   */\r\n  function convertEntryToMidi(amount) {\r\n    let mapped = mapData(minAmount, maxAmount, minMidiPitch, maxMidiPitch, amount);\r\n    let midi = Math.floor(mapped);\r\n    return midi;\r\n  }\r\n\r\n  /**\r\n   * Sonifies data of selected region\r\n   */\r\n  const sonifyData = () => {\r\n    Tone.Transport.cancel();  // stops previous loop\r\n\r\n    // Map region data to objects { note, index }\r\n    const notes = regionData.map(entry => ({\r\n      note: convertEntryToMidi(entry.amount),\r\n      date: entry.date,\r\n      index: entry.index,\r\n    })).filter(entry => !isNaN(entry.note));\r\n    \r\n    // Set up pattern to play data\r\n    var pattern = new Tone.Pattern((time, entry) => {\r\n      synth.current.triggerAttackRelease(Tone.Frequency(entry.note, 'midi'), 0.25);\r\n      \r\n      setCurrentAmt(regionData[entry.index].amount);\r\n      setCurrentDate(entry.date);\r\n\r\n      // Stop playback when finished\r\n      if (pattern.index === pattern.values.length - 1) {\r\n        Tone.Transport.cancel();\r\n      }\r\n    }, notes);\r\n    \r\n    pattern.start(0);\r\n    Tone.Transport.bpm.value = bpm;\r\n\r\n    Tone.Transport.start();\r\n  }\r\n\r\n  /**\r\n   * Sanitizes region data for visualiation in react-vis\r\n   * @param {Array} regionData region data containing objects { date, amount, index }\r\n   * @returns an array of objects { x, y, color }\r\n   */\r\n  const sanitizeData = regionData => {\r\n    const data = regionData.filter(entry => !isNaN(entry.amount)).map(\r\n      entry => ({\r\n        x: entry.index,\r\n        y: entry.amount,\r\n        color: entry.amount === currentAmt ? 0 : 1,\r\n      })\r\n    );\r\n    \r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Plays a single tone with current synth options\r\n   */\r\n  const playMidiNote = midiNote => {\r\n    synth.current.triggerAttackRelease(Tone.Frequency(midiNote, 'midi'), '8n');\r\n  }  \r\n\r\n  /**\r\n   * Insures only numerical inputs are processed\r\n   * @param {Object} event event from React-Bootstrap form input \r\n   * @param {Function} setStateFunction function to set state with new event value\r\n   */\r\n  const handleInput = (event, setStateFunction) => {\r\n    let newValue = parseInt(event.target.value);\r\n    if (isNaN(newValue)) {\r\n      return;\r\n    }\r\n    setStateFunction(newValue);\r\n  }\r\n\r\n  let key = 0;\r\n  return (\r\n    <div className='body'>\r\n      <h1>COVID-19 Data Sonification</h1>\r\n      {/* covid19 data stuff */}\r\n      <h3>Display data:</h3>\r\n      <p>{isLoading ? 'Loading data...' : null}</p>\r\n      <p>{isError ? 'An error occurred.' : null}</p>\r\n      \r\n      <p>Min/max amount: {minAmount}/{maxAmount}</p>\r\n      <p>Current amount: {currentAmt === -1 ? 'None' : `${currentAmt} cases at ${currentDate}`}</p>\r\n\r\n      <h4>Current region: {region}</h4>\r\n      \r\n\r\n      <ButtonGroup>\r\n        <RegionDropdown regions={regions} callback={initializeRegion} />\r\n        <Button onClick={() => setVisualize(!visualize)}>Toggle visualization</Button>\r\n        <Button onClick={() => setAnimation(!animation)}>Toggle animation (affects performance)</Button>\r\n      </ButtonGroup>\r\n      <br />\r\n\r\n      {/* Play/stop buttons when region data is selected */}\r\n      {\r\n        regionData.length === 0 \r\n          ? null \r\n          : (\r\n              <ButtonGroup>\r\n                <Button variant='success' onClick={() => sonifyData(oscTypes[oscSelection])}>\r\n                  Play\r\n                </Button>\r\n                <Button variant='danger' onClick={() => Tone.Transport.cancel()}>\r\n                  Stop\r\n                </Button>\r\n              </ButtonGroup>\r\n            )\r\n      }\r\n\r\n      {/* Data visualization */}\r\n      {visualize && \r\n        <FlexibleWidthXYPlot \r\n          height={400}\r\n          onMouseLeave={() => setCurrentAmt(-1)}\r\n          colorRange={['yellow', 'cornflowerblue']}\r\n          animation={animation}\r\n        >\r\n          <HorizontalGridLines style={{stroke: '#B7E9ED'}} />\r\n          <VerticalGridLines style={{stroke: '#B7E9ED'}} />\r\n\r\n          <VerticalBarSeries\r\n            data={sanitizeData(regionData)}\r\n            onNearestX={(entry, {index}) => {\r\n              setCurrentAmt(entry.y);\r\n              setCurrentDate(regionData[index].date);\r\n            }}\r\n            onValueClick={entry => {\r\n              playMidiNote(convertEntryToMidi(entry.y));\r\n            }}\r\n          />\r\n\r\n          <XAxis title=\"Days since December 31, 2019\" />\r\n          <YAxis title=\"Total amount of cases\" left={50} />\r\n        </FlexibleWidthXYPlot>\r\n      }\r\n\r\n      { /* tone js stuff */}\r\n      <h3>Options:</h3>\r\n      \r\n      <Button variant=\"info\" onClick={() => playMidiNote(pitch)}>Play test pitch</Button>\r\n      <br />\r\n      <br />\r\n      \r\n      <ButtonGroup aria-label='Increase/decrease pitch'>\r\n        <Button variant='secondary' onClick={() => setPitch(pitch - 1)}>\r\n          Decrease pitch\r\n        </Button>\r\n        <Button variant='secondary' onClick={() => setPitch(pitch + 1)}>\r\n          Increase pitch\r\n        </Button>\r\n      </ButtonGroup>\r\n      <p>The current MIDI pitch is: <strong>{pitch}</strong></p>\r\n      \r\n      \r\n      <Button variant='primary' onClick={\r\n        () => setOscSelection((oscSelection + 1) % oscTypes.length)\r\n      }>\r\n        Toggle oscillator\r\n      </Button>\r\n      <p>The current oscillator is: <strong>{oscTypes[oscSelection]}</strong></p>\r\n      <br />\r\n\r\n      {/* Min MIDI pitch input */}\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Minimum MIDI pitch</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <FormControl \r\n          placeholder='Ex: 0'\r\n          aria-label='Minimum MIDI pitch'\r\n          onChange={(event) => handleInput(event, setMinMidiPitch)}\r\n        />\r\n      </InputGroup>\r\n\r\n      {/* Max MIDI pitch input */}\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Maximum MIDI pitch</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <FormControl\r\n          placeholder='Ex: 127'\r\n          aria-label='Maximum MIDI pitch'\r\n          onChange={(event) => handleInput(event, setMaxMidiPitch)}\r\n        />\r\n      </InputGroup>\r\n\r\n      <p>\r\n        Min/max MIDI pitch: <strong>[{minMidiPitch}, {maxMidiPitch}]</strong>\r\n      </p>\r\n\r\n      {/* BPM input */}\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Playback BPM</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <FormControl\r\n          placeholder='Ex: 200'\r\n          aria-label='BPM'\r\n          onChange={(event) => handleInput(event, setBpm)}\r\n        />\r\n      </InputGroup>\r\n      <p>\r\n        Current BPM: <strong>{bpm}</strong>\r\n      </p>\r\n      \r\n      {/* Data (actual / MIDI) */}\r\n      {regionData.length !== 0 && (<h2>Raw data</h2>)}\r\n      <ul>\r\n        {regionData.length !== 0 &&\r\n          regionData.map(entry => (\r\n            <li key={key++} >\r\n              {entry.date}: <strong>{\r\n                isNaN(entry.amount) \r\n                  ? 'No data' \r\n                  : entry.amount\r\n              }</strong> \r\n            </li>\r\n          ))\r\n        }\r\n      </ul>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';  // React-Bootstrap CSS dependency\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}