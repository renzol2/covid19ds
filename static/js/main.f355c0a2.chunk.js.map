{"version":3,"sources":["data/FetchOwidData.js","util/getMinMax.js","util/mapData.js","components/regionDropdown.js","components/dataDropdown.js","components/DataGraph.js","components/BpmInput.js","components/OscillatorToggleButton.js","components/pitchChange.js","components/MinMaxMidiInput.js","App.js","serviceWorker.js","index.js"],"names":["FetchOwidData","initUrl","useState","url","setUrl","data","setData","regions","setRegions","isLoading","setLoading","isError","setError","useEffect","a","Papa","parse","download","header","complete","results","errors","length","map","error","console","log","regionsList","Object","keys","shift","fetchData","getMinMax","arr","min","max","i","isNaN","mapData","low1","high1","low2","high2","point","CountryToggle","React","forwardRef","ref","children","onClick","Button","href","e","preventDefault","RegionMenu","style","className","labeledBy","value","setValue","aria-labelledby","FormControl","autoFocus","placeholder","onChange","target","Children","toArray","filter","child","props","toLowerCase","includes","RegionDropdown","callback","sendRegionToParent","region","key","Dropdown","onSelect","event","Toggle","as","id","Menu","Item","eventKey","DataDropdown","handleChange","bind","newDatasetUrl","this","setDataset","setTimeout","initializeRegion","waitTime","datasets","dataset","title","Component","DataGraph","visualize","height","animation","colorRange","gridLineColor","onMouseLeave","onNearestX","onValueClick","xAxisTitle","yAxisTitle","yAxisLeft","stroke","left","BpmInput","InputGroup","Prepend","Text","aria-label","handleInput","setBpm","bpm","OscillatorToggleButton","variant","setOscSelection","oscSelection","oscTypes","PitchButtonGroup","ButtonGroup","setPitch","pitch","MinMaxMidiInput","setMinMidiPitch","setMaxMidiPitch","defaultUrl","App","setRegion","regionData","setRegionData","minAmount","setMinAmount","maxAmount","setMaxAmount","setVisualize","setAnimation","currentAmt","setCurrentAmt","currentDate","setCurrentDate","minMidiPitch","maxMidiPitch","synth","useRef","selectedRegion","newRegion","selectedRegionData","amounts","line","push","date","amount","parseInt","index","entry","minMax","initializeRegionData","convertEntryToMidi","mapped","Math","floor","playMidiNote","midiNote","current","triggerAttackRelease","Tone","setStateFunction","newValue","options","oscillator","type","toMaster","cancel","notes","note","pattern","time","values","start","sonifyData","x","y","color","sanitizeData","dset","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f355c0a2.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\r\nimport Papa from 'papaparse';\r\n\r\n/**\r\n  Fetches data from Our World In Data at the requested URL.\r\n  Amount specifies how many lines of CSV file to parse.\r\n\r\n  Modeled after: https://www.robinwieruch.de/react-hooks-fetch-data\r\n\r\n  @param initUrl initial url to fetch data from\r\n  @return array containing state pertaining to data\r\n*/\r\nfunction FetchOwidData(initUrl) {\r\n  const [url, setUrl] = useState(initUrl);\r\n  const [data, setData] = useState([]);\r\n  const [regions, setRegions] = useState([]);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [isError, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      setError(false);\r\n\r\n      try {\r\n        Papa.parse(url, {\r\n          download: true,\r\n          header: true,  // uses the header to convert CSV into JSON\r\n          \r\n          // Callback function called once PapaParser finishes parsing\r\n          complete: (results) => {\r\n            if (results.errors.length > 0) {\r\n              results.errors.map(error => (console.log(error)));\r\n            }\r\n            \r\n            //console.log(results.data);\r\n            setData(results.data);\r\n\r\n            let regionsList = Object.keys(results.data[0]);\r\n            regionsList.shift();  // removes the first element 'date'\r\n            //console.log(regionsList);\r\n            setRegions(regionsList);\r\n          }\r\n        })\r\n      } catch (error) {\r\n        console.log(error);\r\n        setError(true);\r\n      };\r\n\r\n      setLoading(false);\r\n    }\r\n    \r\n    // Call the above function\r\n    fetchData();\r\n\r\n  }, [url]);\r\n  \r\n  // Returned as state\r\n  return [{ data, regions, isLoading, isError }, setUrl];\r\n}\r\n\r\nexport default FetchOwidData;","/**\r\n * Finds the minimum and maximum of an array\r\n * @param {Array} arr array to find min/max\r\n * @returns object { min: [min], max: [max] }\r\n */\r\nconst getMinMax = arr => {\r\n  let min = arr[0];\r\n  let max = arr[0];\r\n  let i = arr.length;\r\n\r\n  while (i--) {\r\n    if (isNaN(arr[i])) continue;\r\n    min = arr[i] < min ? arr[i] : min;\r\n    max = arr[i] > max ? arr[i] : max;\r\n  }\r\n  \r\n  return { min, max };\r\n}\r\n\r\nexport default getMinMax;\r\n\r\n","/**\r\n * Maps a point of data from one set of bounds to another\r\n * @param {number} low1 lower bound of range 1\r\n * @param {number} high1 upper bound of range 1\r\n * @param {number} low2 lower bound of range 2\r\n * @param {number} high2 upper bound of range 2\r\n * @param {number} point point in range 1 to map from range 1 to range 2\r\n */\r\nconst mapData = (low1, high1, low2, high2, point) => {\r\n  let range1 = high1 - low1;\r\n  let range2 = high2 - low2;\r\n\r\n  let pointPosition = point - low1;\r\n  let ratio = pointPosition / range1;\r\n\r\n  return low2 + range2 * ratio;\r\n}\r\n\r\nexport default mapData;","import React, {useState} from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport PropTypes from 'prop-types';\r\nimport './RegionDropdown.css';\r\n\r\n// Search function for dropdown taken from:\r\n// https://react-bootstrap.github.io/components/dropdowns/#custom-dropdown-components\r\n\r\n/**\r\n * Button that toggles visibility of countries\r\n */\r\nconst CountryToggle = React.forwardRef(({children, onClick}, ref) => (\r\n  <Button\r\n    href=''\r\n    ref={ref}\r\n    onClick={(e) => {\r\n      e.preventDefault();\r\n      onClick(e);\r\n    }}\r\n  >\r\n    {children}\r\n  </Button>\r\n));\r\n\r\n/**\r\n * Menu that lists all countries\r\n */\r\nconst RegionMenu = React.forwardRef(\r\n  ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\r\n    const [value, setValue] = useState('');\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={style}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <FormControl\r\n          autoFocus\r\n          className='mx-3 my-2 w-auto'\r\n          placeholder='Type to filter...'\r\n          onChange={(e) => setValue(e.target.value)}\r\n          value={value}\r\n        />\r\n        <ul className='list-unstyled'>\r\n          {React.Children.toArray(children).filter(\r\n            (child) =>\r\n              !value || child.props.children.toLowerCase().includes(value),\r\n          )}\r\n        </ul>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\n\r\n/**\r\n * Dropdown that displays regions and sends selection to parent component\r\n * @param {Array} regions array of region names (strings)\r\n * @param {func} callback function from parent component that returns selected region \r\n */\r\nconst RegionDropdown = ({regions, callback}) => {\r\n\r\n  const handleChange = event => {\r\n    sendRegionToParent(regions[event]);\r\n  }\r\n\r\n  const sendRegionToParent = region => {\r\n    callback(region);\r\n  }\r\n\r\n  let key = 0;\r\n  return (\r\n    <div>\r\n        <Dropdown onSelect={handleChange}>\r\n          <Dropdown.Toggle as={CountryToggle} id='dropdown-custom-components'>\r\n            Choose country \r\n          </Dropdown.Toggle>\r\n\r\n          <Dropdown.Menu as={RegionMenu} className='dropdown-scroll'>\r\n            {regions.map(region => (\r\n              <Dropdown.Item \r\n                eventKey={key++}\r\n                key={key} \r\n              >\r\n                {region}\r\n              </Dropdown.Item>\r\n            ))}\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      </div>\r\n  );\r\n}\r\n\r\nRegionDropdown.propTypes = {\r\n  regions: PropTypes.array.isRequired,\r\n  callback: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default RegionDropdown;","import React, {Component} from 'react';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass DataDropdown extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  async handleChange(newDatasetUrl) {\r\n    this.props.setDataset(newDatasetUrl);\r\n    await this.props.fetchData(newDatasetUrl);\r\n\r\n    /*\r\n     FIXME: the function initializeRegion finishes BEFORE the\r\n     dataset can be downloaded and updated with fetchData. Need to find a way to do a\r\n     await/async operation with fetchData and initializeRegion.\r\n     */\r\n    setTimeout(() => this.props.initializeRegion(this.props.region), this.props.waitTime);\r\n  }\r\n\r\n  render() {\r\n    let key = 0;\r\n    return (\r\n      <Dropdown\r\n        onSelect={this.handleChange}\r\n      >\r\n        <Dropdown.Toggle id=\"dropdown-basic\">\r\n          Choose data\r\n        </Dropdown.Toggle>\r\n\r\n        <Dropdown.Menu>\r\n          {this.props.datasets.map(dataset => (\r\n            <Dropdown.Item eventKey={dataset.url} key={key++}>\r\n              {dataset.title}\r\n            </Dropdown.Item>\r\n          ))}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    );\r\n  }\r\n}\r\n\r\nDataDropdown.propTypes = {\r\n  datasets: PropTypes.array.isRequired,\r\n  setDataset: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default DataDropdown;","import React, {Component} from 'react';\r\n\r\nimport {\r\n  FlexibleWidthXYPlot, \r\n  XAxis, \r\n  YAxis, \r\n  VerticalBarSeries, \r\n  HorizontalGridLines,\r\n  VerticalGridLines,\r\n} from 'react-vis';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Visualization of COVID-19 Data using react-vis\r\n */\r\nclass DataGraph extends Component {\r\n  render() {\r\n    const props = this.props;\r\n    if (!props.visualize) return <div />;\r\n\r\n    // Props\r\n    const height = props.height;\r\n    const animation = props.animation;\r\n    const colorRange = props.colorRange;\r\n    const gridLineColor = props.gridLineColor;\r\n    const data = props.data;\r\n    const onMouseLeave = props.onMouseLeave;\r\n    const onNearestX = props.onNearestX;\r\n    const onValueClick = props.onValueClick;\r\n    const xAxisTitle = props.xAxisTitle;\r\n    const yAxisTitle = props.yAxisTitle;\r\n    const yAxisLeft = props.yAxisLeft;\r\n\r\n    return (\r\n      <FlexibleWidthXYPlot \r\n          height={height}\r\n          onMouseLeave={onMouseLeave}\r\n          colorRange={colorRange}\r\n          animation={animation}\r\n        >\r\n          <HorizontalGridLines style={{stroke: gridLineColor}} />\r\n          <VerticalGridLines style={{stroke: gridLineColor}} />\r\n\r\n          <VerticalBarSeries\r\n            data={data}\r\n            onNearestX={onNearestX}\r\n            onValueClick={onValueClick}\r\n          />\r\n\r\n          <XAxis title={xAxisTitle} />\r\n          <YAxis title={yAxisTitle} left={yAxisLeft} />\r\n        </FlexibleWidthXYPlot>\r\n    );\r\n  }\r\n}\r\n\r\nDataGraph.propTypes = {\r\n  visualize: PropTypes.bool.isRequired,\r\n  height: PropTypes.number.isRequired,\r\n  animation: PropTypes.bool.isRequired,\r\n  colorRange: PropTypes.array.isRequired,\r\n  gridLineColor: PropTypes.string.isRequired,\r\n  data: PropTypes.array.isRequired,\r\n  onMouseLeave: PropTypes.func.isRequired,\r\n  onNearestX: PropTypes.func.isRequired,\r\n  onValueClick: PropTypes.func.isRequired,\r\n  xAxisTitle: PropTypes.string.isRequired,\r\n  yAxisTitle: PropTypes.string.isRequired,\r\n  yAxisLeft: PropTypes.number.isRequired\r\n}\r\n\r\nexport default DataGraph;\r\n","import React, {Component} from 'react';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Allows user to change sonification playback BPM\r\n * \r\n * @param {number} props.bpm         BPM state of application to be displayed\r\n * @param {func}   props.handleInput function that handles numerical state change\r\n * @param {func}   props.setBpm      function that sets BPM state of application\r\n */\r\nclass BpmInput extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <InputGroup>\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Playback BPM</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <FormControl\r\n            placeholder='Ex: 200'\r\n            aria-label='BPM'\r\n            onChange={\r\n              (event) => this.props.handleInput(\r\n                event, this.props.setBpm\r\n              )\r\n            }\r\n          />\r\n        </InputGroup>\r\n        <p>\r\n          Current BPM: <strong>{this.props.bpm}</strong>\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nBpmInput.propTypes = {\r\n  handleInput: PropTypes.func.isRequired,\r\n  setBpm: PropTypes.func.isRequired,\r\n  bpm: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default BpmInput;\r\n","import React, {Component} from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Toggles through the app's oscillator types\r\n * \r\n * @param {func}   props.setOscSelection function that sets oscSelection state\r\n * @param {number} props.oscSelection    state that represents selected oscillator from oscTypes\r\n * @param {array}  props.oscTypes        array that holds names of different oscillator types\r\n */\r\nclass OscillatorToggleButton extends Component {\r\n  render() {\r\n    return (\r\n      <Button \r\n        variant='primary' \r\n        onClick={\r\n          () => this.props.setOscSelection(\r\n            (this.props.oscSelection + 1) % this.props.oscTypes.length\r\n          )\r\n        }\r\n      >\r\n        Toggle oscillator\r\n      </Button>\r\n    );\r\n  }\r\n}\r\n\r\nOscillatorToggleButton.propTypes = {\r\n  setOscSelection: PropTypes.func.isRequired,\r\n  oscSelection: PropTypes.number.isRequired,\r\n  oscTypes: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default OscillatorToggleButton;","import React, {Component} from 'react';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Allows user to change the MIDI value of test pitch\r\n * \r\n * @param {func}   props.setPitch function to change pitch state of app\r\n * @param {number} props.pitch    state representing MIDI value of test pitch\r\n */\r\nclass PitchButtonGroup extends Component {\r\n  render() {\r\n    return (\r\n      <ButtonGroup aria-label='Increase/decrease pitch'>\r\n        <Button variant='secondary' onClick={\r\n          () => this.props.setPitch(this.props.pitch - 1)\r\n        }>\r\n          Decrease pitch\r\n        </Button>\r\n\r\n        <Button variant='secondary' onClick={\r\n          () => this.props.setPitch(this.props.pitch + 1)\r\n        }>\r\n          Increase pitch\r\n        </Button>\r\n      </ButtonGroup>\r\n    );\r\n  }\r\n}\r\n\r\nPitchButtonGroup.propTypes = {\r\n  setPitch: PropTypes.func.isRequired,\r\n  pitch: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default PitchButtonGroup;\r\n","import React, {Component} from 'react';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Allows user to set the bounds of min/max MIDI values for sonification\r\n * \r\n * @param {func} props.handleInput     function to handle numerical state change\r\n * @param {func} props.setMinMidiPitch function that sets min MIDI value state\r\n * @param {func} props.setMaxMidiPitch function that sets max MIDI value state\r\n */\r\nclass MinMaxMidiInput extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* Min MIDI pitch input */}\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Minimum MIDI pitch</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <FormControl \r\n          placeholder='Ex: 0'\r\n          aria-label='Minimum MIDI pitch'\r\n          onChange={\r\n            (event) => this.props.handleInput(event, this.props.setMinMidiPitch)\r\n          }\r\n        />\r\n      </InputGroup>\r\n\r\n      {/* Max MIDI pitch input */}\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Maximum MIDI pitch</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <FormControl\r\n          placeholder='Ex: 127'\r\n          aria-label='Maximum MIDI pitch'\r\n          onChange={\r\n            (event) => this.props.handleInput(event, this.props.setMaxMidiPitch)\r\n          }\r\n        />\r\n      </InputGroup>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMinMaxMidiInput.propTypes = {\r\n  handleInput: PropTypes.func.isRequired,\r\n  setMinMidiPitch: PropTypes.func.isRequired,\r\n  setMaxMidiPitch: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default MinMaxMidiInput;\r\n","import React, {useState, useRef, useEffect} from 'react';\r\nimport './App.css';\r\n\r\n// Tone.js imports\r\nimport * as Tone from 'tone';\r\n\r\n// React-Bootstrap imports\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\n\r\n// Function imports\r\nimport FetchOwidData from './data/FetchOwidData';\r\nimport getMinMax from './util/getMinMax';\r\nimport mapData from './util/mapData';\r\n\r\n// Components\r\nimport RegionDropdown from './components/regionDropdown';\r\nimport DataDropdown from './components/dataDropdown';\r\nimport DataGraph from './components/DataGraph';\r\nimport BpmInput from './components/BpmInput';\r\nimport OscillatorToggleButton from './components/OscillatorToggleButton';\r\nimport PitchButtonGroup from './components/pitchChange';\r\nimport MinMaxMidiInput from './components/MinMaxMidiInput';\r\n\r\n// Default pitch\r\nconst defaultPitch = 60;\r\n\r\n// Default BPM\r\nconst defaultBpm = 999;\r\n\r\n// Default MIDI parameters\r\nconst defaultMinMidi = 36;\r\nconst defaultMaxMidi = 96;\r\n\r\n// Default oscillator selection\r\nconst defaultOscSelection = 1;\r\n\r\n// All oscillator types\r\nconst oscTypes = [\r\n  'sine',\r\n  'triangle',\r\n  'square',\r\n  'sawtooth',\r\n];\r\n\r\n// URL to fetch data\r\nconst defaultUrl = 'https://covid.ourworldindata.org/data/ecdc/total_cases.csv';\r\n\r\n// All data\r\nconst datasets = [\r\n  {\r\n    title: 'Total cases',\r\n    url: 'https://covid.ourworldindata.org/data/ecdc/total_cases.csv',\r\n  },\r\n  {\r\n    title: 'Total deaths',\r\n    url: 'https://covid.ourworldindata.org/data/ecdc/total_deaths.csv'\r\n  },\r\n  {\r\n    title: 'New cases',\r\n    url: 'https://covid.ourworldindata.org/data/ecdc/new_cases.csv',\r\n  },\r\n  {\r\n    title: 'New deaths',\r\n    url: 'https://covid.ourworldindata.org/data/ecdc/new_deaths.csv'\r\n  }\r\n];\r\n\r\nfunction App() {\r\n  // Data state variables\r\n  const [{ data, regions, isLoading, isError }, fetchData] = FetchOwidData(defaultUrl);\r\n  const [dataset, setDataset] = useState(defaultUrl);\r\n  const [region, setRegion] = useState('');\r\n  const [regionData, setRegionData] = useState([]);\r\n  const [minAmount, setMinAmount] = useState(0);\r\n  const [maxAmount, setMaxAmount] = useState(0);\r\n  const [visualize, setVisualize] = useState(true);\r\n  const [animation, setAnimation] = useState(false);\r\n  const [currentAmt, setCurrentAmt] = useState(-1);\r\n  const [currentDate, setCurrentDate] = useState('');\r\n\r\n  // Sonification state variables\r\n  const [pitch, setPitch] = useState(defaultPitch);\r\n  const [oscSelection, setOscSelection] = useState(defaultOscSelection);\r\n  const [minMidiPitch, setMinMidiPitch] = useState(defaultMinMidi);\r\n  const [maxMidiPitch, setMaxMidiPitch] = useState(defaultMaxMidi);\r\n  const [bpm, setBpm] = useState(defaultBpm);\r\n\r\n  // Synth (with initialization)\r\n  const synth = useRef(null);\r\n  useEffect(() => {\r\n    // Set oscillator type and initialize synth\r\n    const options = {oscillator: {\r\n      type: oscTypes[oscSelection],\r\n    }};\r\n    synth.current = new Tone.Synth(options).toMaster();\r\n  });\r\n\r\n  /**\r\n   * Updates state variables with region from dropdown\r\n   * @param {string} selectedRegion region from dropdown component\r\n   */\r\n  function initializeRegion(selectedRegion) {\r\n    console.log('init region');\r\n    setRegion(selectedRegion);\r\n    initializeRegionData(selectedRegion);\r\n  };\r\n\r\n  /**\r\n   * Sets region data and min/max pitches using region data\r\n   * @param {string} newRegion selected region from dropdown\r\n   */\r\n  function initializeRegionData(newRegion) {\r\n    let selectedRegionData = [];\r\n    let amounts = [];\r\n\r\n    // Populate region data and amounts\r\n    let key = 0;\r\n    for (var line of data) {\r\n      selectedRegionData.push(\r\n        { \r\n          date: line['date'], \r\n          amount: parseInt(line[newRegion]),\r\n          index: key++\r\n        }\r\n      );\r\n      \r\n      amounts.push(parseInt(line[newRegion])); \r\n    }\r\n\r\n    selectedRegionData.filter(entry => !isNaN(entry.amount));\r\n    setRegionData(selectedRegionData);\r\n    \r\n    let minMax = getMinMax(amounts.filter(\r\n      amount => !isNaN(amount)\r\n    ));\r\n\r\n    setMinAmount(minMax.min);\r\n    setMaxAmount(minMax.max);\r\n  };\r\n\r\n  /**\r\n   * Maps a point of data to a MIDI note using min/max amounts kept in state\r\n   * @param {number} amount data to map\r\n   * @returns {number} MIDI note\r\n   */\r\n  function convertEntryToMidi(amount) {\r\n    let mapped = mapData(minAmount, maxAmount, minMidiPitch, maxMidiPitch, amount);\r\n    let midi = Math.floor(mapped);\r\n    return midi;\r\n  }\r\n\r\n  /**\r\n   * Sonifies data of selected region\r\n   */\r\n  function sonifyData() {\r\n    Tone.Transport.cancel();  // stops previous loop\r\n\r\n    // Map region data to objects { note, index }\r\n    const notes = regionData.map(entry => ({\r\n      note: convertEntryToMidi(entry.amount),\r\n      date: entry.date,\r\n      index: entry.index,\r\n    })).filter(entry => !isNaN(entry.note));\r\n    \r\n    // Set up pattern to play data\r\n    var pattern = new Tone.Pattern((time, entry) => {\r\n      synth.current.triggerAttackRelease(Tone.Frequency(entry.note, 'midi'), 0.25);\r\n      \r\n      setCurrentAmt(regionData[entry.index].amount);\r\n      setCurrentDate(entry.date);\r\n\r\n      // Stop playback when finished\r\n      if (pattern.index === pattern.values.length - 1) {\r\n        Tone.Transport.cancel();\r\n      }\r\n    }, notes);\r\n    \r\n    pattern.start(0);\r\n    Tone.Transport.bpm.value = bpm;\r\n\r\n    Tone.Transport.start();\r\n  }\r\n\r\n  /**\r\n   * Sanitizes region data for visualiation in react-vis\r\n   * @param {Array} regionData region data containing objects { date, amount, index }\r\n   * @returns {Array} an array of objects { x, y, color }\r\n   */\r\n  function sanitizeData(regionData) {\r\n    const data = regionData.filter(entry => !isNaN(entry.amount)).map(\r\n      entry => ({\r\n        x: entry.index,\r\n        y: entry.amount,\r\n        color: entry.amount === currentAmt ? 0 : 1,\r\n      })\r\n    );\r\n    \r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Plays the given MIDI note using the synth and its current settings\r\n   * @param {number} midiNote \r\n   */\r\n  function playMidiNote(midiNote) {\r\n    synth.current.triggerAttackRelease(Tone.Frequency(midiNote, 'midi'), '8n');\r\n  }  \r\n\r\n  /**\r\n   * Handles numerical input for visualization/sonification parameters (state)\r\n   * Insures only numerical inputs are processed\r\n   * \r\n   * @param {Object} event event from React-Bootstrap form input \r\n   * @param {Function} setStateFunction function to set state with new event value\r\n   */\r\n  function handleInput(event, setStateFunction) {\r\n    let newValue = parseInt(event.target.value);\r\n    if (isNaN(newValue)) {\r\n      return;\r\n    }\r\n    setStateFunction(newValue);\r\n  }\r\n\r\n  /**\r\n   * Return statement\r\n   */\r\n  let key = 0;\r\n  return (\r\n    <div className='body'>\r\n      <h1>COVID-19 Data Sonification</h1>\r\n\r\n      {/* Data information */}\r\n      <h3>Display data:</h3>\r\n      <p>{isLoading ? 'Loading data...' : null}</p>\r\n      <p>{isError ? 'An error occurred.' : null}</p>\r\n      \r\n      <p>Min/max amount: {minAmount}/{maxAmount}</p>\r\n      <p>Current amount: {currentAmt === -1 ? 'None' : `${currentAmt} cases at ${currentDate}`}</p>\r\n      <p>Dataset URL: {dataset === '' ? 'None' : dataset}</p>\r\n\r\n      <h4>Current region: {region}</h4>\r\n      \r\n      <ButtonGroup>\r\n        <RegionDropdown regions={regions} callback={initializeRegion} />\r\n        <DataDropdown\r\n          datasets={datasets}\r\n          setDataset={setDataset}\r\n          fetchData={fetchData}\r\n          region={region}\r\n          initializeRegion={initializeRegion}\r\n          waitTime={600}\r\n        />\r\n        <Button onClick={() => setVisualize(!visualize)}>Toggle visualization</Button>\r\n        <Button onClick={() => setAnimation(!animation)}>Toggle animation (affects performance)</Button>\r\n      </ButtonGroup>\r\n\r\n      {/* Play/stop buttons when region data is selected */}\r\n      {regionData.length !== 0 && \r\n        (\r\n          <ButtonGroup>\r\n            <Button variant='success' onClick={() => sonifyData(oscTypes[oscSelection])}>\r\n              Play\r\n            </Button>\r\n            <Button variant='danger' onClick={() => Tone.Transport.cancel()}>\r\n              Stop\r\n            </Button>\r\n          </ButtonGroup>\r\n        )\r\n      }\r\n\r\n      {/* Data visualization */}\r\n      <DataGraph\r\n        visualize={visualize}\r\n        height={400}\r\n        animation={animation}\r\n        colorRange={['yellow', 'cornflowerblue']}\r\n        gridLineColor={'#B7E9ED'}\r\n        data={sanitizeData(regionData)}\r\n        onMouseLeave={() => setCurrentAmt(-1)}\r\n        onNearestX={(entry, {index}) => {\r\n          setCurrentAmt(entry.y);\r\n          setCurrentDate(regionData[index].date);\r\n        }}\r\n        onValueClick={entry => {\r\n          playMidiNote(convertEntryToMidi(entry.y));\r\n        }}\r\n\r\n        xAxisTitle={'Days since December 31, 2019'}\r\n        yAxisTitle={datasets.filter(dset => dset.url === dataset)[0].title}\r\n        yAxisLeft={50}\r\n      />\r\n\r\n      { /* Sonification parameters */}\r\n      <h3>Options:</h3>\r\n      \r\n      <Button variant=\"info\" onClick={() => playMidiNote(pitch)}>Play test pitch</Button>\r\n      <br />\r\n      <br />\r\n      \r\n      <PitchButtonGroup setPitch={setPitch} pitch={pitch} />\r\n      <p>The current MIDI pitch is: <strong>{pitch}</strong></p>\r\n      \r\n      <OscillatorToggleButton \r\n        setOscSelection={setOscSelection}\r\n        oscSelection={oscSelection}\r\n        oscTypes={oscTypes}\r\n      />\r\n      <p>The current oscillator is: <strong>{oscTypes[oscSelection]}</strong></p>\r\n      <br />\r\n\r\n      <MinMaxMidiInput\r\n        handleInput={handleInput}\r\n        setMinMidiPitch={setMinMidiPitch}\r\n        setMaxMidiPitch={setMaxMidiPitch}\r\n      />\r\n      <p>\r\n        Min/max MIDI pitch: <strong>[{minMidiPitch}, {maxMidiPitch}]</strong>\r\n      </p>\r\n\r\n      {/* BPM input */}\r\n      <BpmInput bpm={bpm} setBpm={setBpm} handleInput={handleInput} />\r\n      \r\n      {/* Data (actual / MIDI) */}\r\n      {regionData.length !== 0 && (<h2>Raw data</h2>)}\r\n      <ul>\r\n        {regionData.length !== 0 &&\r\n          regionData.map(entry => (\r\n            <li key={key++} >\r\n              {entry.date}: <strong>{\r\n                isNaN(entry.amount) \r\n                  ? 'No data' \r\n                  : entry.amount\r\n              }</strong> \r\n            </li>\r\n          ))\r\n        }\r\n      </ul>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';  // React-Bootstrap CSS dependency\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}