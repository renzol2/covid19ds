{"version":3,"sources":["data/FetchOwidData.js","util/getMinMax.js","util/mapData.js","util/quantizeNote.js","components/regionDropdown.js","components/DataDropdownClass.js","components/DataVisualization.js","components/BpmInput.js","components/OscillatorDropdown.js","components/MinMaxMidiInput.js","components/ScaleDropdown.js","App.js","serviceWorker.js","index.js"],"names":["FetchOwidData","initUrl","useState","url","setUrl","data","setData","regions","setRegions","isLoading","setLoading","isError","setError","useEffect","a","Papa","parse","download","header","complete","results","errors","length","map","error","console","log","regionsList","Object","keys","shift","fetchData","getMinMax","arr","min","max","i","isNaN","mapData","low1","high1","low2","high2","point","quantizeNote","note","scale","midiPitch","quantized","pitchClass","includes","CountryToggle","React","forwardRef","ref","children","onClick","Button","href","e","preventDefault","RegionMenu","style","className","labeledBy","value","setValue","aria-labelledby","FormControl","autoFocus","placeholder","onChange","target","Children","toArray","filter","child","props","toLowerCase","RegionDropdown","callback","currentRegionName","sendRegionToParent","region","key","Dropdown","onSelect","event","Toggle","as","id","Menu","Item","eventKey","DataDropdown","handleChange","bind","newDatasetUrl","this","setDataset","setTimeout","initializeRegion","waitTime","currentDatasetName","datasets","dataset","title","Component","DataVisualization","animate","axisLeft","onMouseMove","isInteractive","enableArea","useMesh","curve","enableGridY","colors","scheme","axisBottom","legend","legendOffset","format","margin","top","bottom","left","right","crosshairType","motionStiffness","motionDamping","BpmInput","bpm","setBpm","handleInput","InputGroup","Prepend","Text","aria-label","OscillatorDropdown","oscSelection","setOscSelection","oscTypes","newOscSelection","osc","MinMaxMidiInput","setMinMidiPitch","setMaxMidiPitch","ScaleDropdown","scales","scaleSelection","setScaleSelection","newScaleKey","name","values","chromatic","major","minor","pentatonic","wholeTone","defaultUrl","App","setRegion","regionData","setRegionData","minAmount","setMinAmount","maxAmount","setMaxAmount","displayViz","setVisualize","doAnimation","setAnimation","Number","MAX_SAFE_INTEGER","currentAmt","setCurrentAmt","currentDate","setCurrentDate","playbackData","setPlaybackData","synthVolume","setSynthVolume","minMidiPitch","maxMidiPitch","inPlayback","setInPlayback","useChorus","setUseChorus","useDist","setUseDist","useJCRev","setUseJCRev","useFreeverb","setUseFreeverb","useAutoWah","setUseAutoWah","synth","useRef","selectedRegion","newRegion","selectedRegionData","amounts","line","push","date","amount","parseInt","index","entry","minMax","initializeRegionData","convertEntryToMidi","mapped","Math","floor","sanitizeData","x","y","color","setStateFunction","newValue","options","oscillator","type","volume","dist","Tone","toMaster","jcrev","freeverb","chorus","autoWah","Q","current","connect","ButtonGroup","find","dset","variant","cancel","quantizedNotes","pattern","time","triggerAttackRelease","start","sonifyData","d","midiNote","undefined","Form","Label","Control","defaultValue","newVolume","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d3583b33.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\r\nimport Papa from 'papaparse';\r\n\r\n/**\r\n  Fetches data from Our World In Data at the requested URL.\r\n  Amount specifies how many lines of CSV file to parse.\r\n\r\n  Modeled after: https://www.robinwieruch.de/react-hooks-fetch-data\r\n\r\n  @param initUrl initial url to fetch data from\r\n  @return array containing state pertaining to data\r\n*/\r\nfunction FetchOwidData(initUrl) {\r\n  const [url, setUrl] = useState(initUrl);\r\n  const [data, setData] = useState([]);\r\n  const [regions, setRegions] = useState([]);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [isError, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      setError(false);\r\n\r\n      try {\r\n        Papa.parse(url, {\r\n          download: true,\r\n          header: true,  // uses the header to convert CSV into JSON\r\n          \r\n          // Callback function called once PapaParser finishes parsing\r\n          complete: (results) => {\r\n            if (results.errors.length > 0) {\r\n              results.errors.map(error => (console.log(error)));\r\n            }\r\n            \r\n            //console.log(results.data);\r\n            setData(results.data);\r\n\r\n            let regionsList = Object.keys(results.data[0]);\r\n            regionsList.shift();  // removes the first element 'date'\r\n            //console.log(regionsList);\r\n            setRegions(regionsList);\r\n          }\r\n        })\r\n      } catch (error) {\r\n        console.log(error);\r\n        setError(true);\r\n      };\r\n\r\n      setLoading(false);\r\n    }\r\n    \r\n    fetchData();\r\n\r\n  }, [url]);\r\n  \r\n  // Returned as state\r\n  return [{ data, regions, isLoading, isError }, setUrl];\r\n}\r\n\r\nexport default FetchOwidData;","/**\r\n * Finds the minimum and maximum of an array\r\n * @param {Array} arr array to find min/max\r\n * @returns object { min: [min], max: [max] }\r\n */\r\nconst getMinMax = arr => {\r\n  let min = arr[0];\r\n  let max = arr[0];\r\n  let i = arr.length;\r\n\r\n  while (i--) {\r\n    if (isNaN(arr[i])) continue;\r\n    min = arr[i] < min ? arr[i] : min;\r\n    max = arr[i] > max ? arr[i] : max;\r\n  }\r\n  \r\n  return { min, max };\r\n}\r\n\r\nexport default getMinMax;\r\n\r\n","/**\r\n * Maps a point of data from one set of bounds to another\r\n * @param {number} low1 lower bound of range 1\r\n * @param {number} high1 upper bound of range 1\r\n * @param {number} low2 lower bound of range 2\r\n * @param {number} high2 upper bound of range 2\r\n * @param {number} point point in range 1 to map from range 1 to range 2\r\n */\r\nconst mapData = (low1, high1, low2, high2, point) => {\r\n  let range1 = high1 - low1;\r\n  let range2 = high2 - low2;\r\n\r\n  let pointPosition = point - low1;\r\n  let ratio = pointPosition / range1;\r\n\r\n  return low2 + range2 * ratio;\r\n}\r\n\r\nexport default mapData;","/**\r\n * Quantizes a MIDI note based on the given scale\r\n * @param {number} note MIDI note to be quantized\r\n * @param {Array} scale list of notes in scale\r\n * @returns {number} quantized MIDI note\r\n */\r\nfunction quantizeNote(note, scale) {\r\n  let midiPitch = note;\r\n  \r\n  const pitchClasses = 12;\r\n  let quantized = false;\r\n\r\n  while (!quantized) {\r\n    let pitchClass = midiPitch % pitchClasses;\r\n\r\n    if (scale.includes(pitchClass)) {\r\n      quantized = true;\r\n      break;\r\n    }\r\n\r\n    if (!quantized) {\r\n      midiPitch--;\r\n    }\r\n  }\r\n  \r\n  return midiPitch;\r\n}\r\n\r\nexport default quantizeNote;","import React, {useState} from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport PropTypes from 'prop-types';\r\nimport './RegionDropdown.css';\r\n\r\n// Search function for dropdown taken from:\r\n// https://react-bootstrap.github.io/components/dropdowns/#custom-dropdown-components\r\n\r\n/**\r\n * Button that toggles visibility of countries\r\n */\r\nconst CountryToggle = React.forwardRef(({children, onClick}, ref) => (\r\n  <Button\r\n    href=''\r\n    ref={ref}\r\n    onClick={(e) => {\r\n      e.preventDefault();\r\n      onClick(e);\r\n    }}\r\n  >\r\n    {children}\r\n  </Button>\r\n));\r\n\r\n/**\r\n * Menu that lists all countries\r\n */\r\nconst RegionMenu = React.forwardRef(\r\n  ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\r\n    const [value, setValue] = useState('');\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={style}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <FormControl\r\n          autoFocus\r\n          className='mx-3 my-2 w-auto'\r\n          placeholder='Type to filter...'\r\n          onChange={(e) => setValue(e.target.value)}\r\n          value={value}\r\n        />\r\n        <ul className='list-unstyled'>\r\n          {React.Children.toArray(children).filter(\r\n            (child) =>\r\n              !value || child.props.children.toLowerCase().includes(value),\r\n          )}\r\n        </ul>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\n\r\n/**\r\n * Dropdown that displays regions and sends selection to parent component\r\n * @param {Array} regions array of region names (strings)\r\n * @param {func} callback function from parent component that returns selected region \r\n */\r\nfunction RegionDropdown({regions, callback, currentRegionName}) {\r\n\r\n  const handleChange = event => {\r\n    sendRegionToParent(regions[event]);\r\n  }\r\n\r\n  const sendRegionToParent = region => {\r\n    callback(region);\r\n  }\r\n\r\n  let key = 0;\r\n  return (\r\n    <div>\r\n        <Dropdown onSelect={handleChange}>\r\n          <Dropdown.Toggle as={CountryToggle} id='dropdown-custom-components'>\r\n            Region: <b>{currentRegionName}</b>\r\n          </Dropdown.Toggle>\r\n\r\n          <Dropdown.Menu as={RegionMenu} className='dropdown-scroll'>\r\n            {regions.map(region => (\r\n              <Dropdown.Item \r\n                eventKey={key++}\r\n                key={key} \r\n              >\r\n                {region}\r\n              </Dropdown.Item>\r\n            ))}\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      </div>\r\n  );\r\n}\r\n\r\nRegionDropdown.propTypes = {\r\n  regions: PropTypes.array.isRequired,\r\n  callback: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default RegionDropdown;","import React, {Component} from 'react';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass DataDropdown extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  async handleChange(newDatasetUrl) {\r\n    this.props.setDataset(newDatasetUrl);\r\n    await this.props.fetchData(newDatasetUrl);\r\n\r\n    /*\r\n     FIXME: the function initializeRegion finishes BEFORE the\r\n     dataset can be downloaded and updated with fetchData. Need to find a way to do a\r\n     await/async operation with fetchData and initializeRegion.\r\n     */\r\n    setTimeout(() => this.props.initializeRegion(this.props.region), this.props.waitTime);\r\n  }\r\n\r\n  render() {\r\n    let key = 0;\r\n    return (\r\n      <Dropdown\r\n        onSelect={this.handleChange}\r\n      >\r\n        <Dropdown.Toggle id=\"dropdown-basic\">\r\n          Data: <b>{this.props.currentDatasetName}</b>\r\n        </Dropdown.Toggle>\r\n\r\n        <Dropdown.Menu>\r\n          {this.props.datasets.map(dataset => (\r\n            <Dropdown.Item eventKey={dataset.url} key={key++}>\r\n              {dataset.title}\r\n            </Dropdown.Item>\r\n          ))}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    );\r\n  }\r\n}\r\n\r\nDataDropdown.propTypes = {\r\n  currentDatasetName: PropTypes.string.isRequired,\r\n  datasets: PropTypes.array.isRequired,\r\n  setDataset: PropTypes.func.isRequired,\r\n  fetchData: PropTypes.func.isRequired,\r\n  region: PropTypes.string.isRequired,\r\n  initializeRegion: PropTypes.func.isRequired,\r\n  waitTime: PropTypes.number.isRequired\r\n}\r\n\r\nexport default DataDropdown;","import React from 'react';\r\n\r\nimport { ResponsiveLine } from '@nivo/line';\r\n\r\nfunction DataVisualization({ animate, axisLeft, data, onClick, onMouseMove }) {\r\n  return (\r\n    <ResponsiveLine\r\n      isInteractive\r\n      enableArea\r\n      useMesh\r\n      animate={animate}\r\n      curve={'linear'}\r\n      enableGridY={false}\r\n      colors={{scheme: 'dark2'}}\r\n      axisLeft={axisLeft}\r\n      axisBottom={{\r\n        legend: 'Days since December 31, 2019',\r\n        legendOffset: 40,\r\n        // Only show values on x-axis that are divisible by 10\r\n        format: value => value % 10 === 0 ? value : ''\r\n      }}\r\n      margin={{top:20,bottom:50,left:60,right:50}}\r\n      data={data}\r\n      onClick={onClick}\r\n      onMouseMove={onMouseMove}\r\n      crosshairType={'cross'}\r\n      motionStiffness={300}\r\n      motionDamping={40}\r\n    />\r\n  );\r\n}\r\n\r\nexport default DataVisualization;\r\n","import React from 'react';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Allows user to change sonification playback BPM\r\n * \r\n * @param {number} bpm         BPM state of application to be displayed\r\n * @param {func}   handleInput function that handles numerical state change\r\n * @param {func}   setBpm      function that sets BPM state of application\r\n */\r\nfunction BpmInput({bpm, setBpm, handleInput}) {\r\n  return (\r\n    <div>\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Playback BPM</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <FormControl\r\n          placeholder='Ex: 200'\r\n          aria-label='BPM'\r\n          onChange={\r\n            (event) => handleInput(\r\n              event, setBpm\r\n            )\r\n          }\r\n        />\r\n      </InputGroup>\r\n      <p>\r\n        Current BPM: <strong>{bpm}</strong>\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nBpmInput.propTypes = {\r\n  handleInput: PropTypes.func.isRequired,\r\n  setBpm: PropTypes.func.isRequired,\r\n  bpm: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default BpmInput;\r\n","import React from 'react';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Toggles through the app's oscillator types\r\n * \r\n * @param {func}   setOscSelection function that sets oscSelection state\r\n * @param {string} oscSelection    state that represents selected oscillator from oscTypes\r\n * @param {array}  oscTypes        array that holds names of different oscillator types\r\n */\r\nfunction OscillatorDropdown({oscSelection, setOscSelection, oscTypes}) {\r\n  return (\r\n    <Dropdown onSelect={(newOscSelection) => setOscSelection(newOscSelection)}>\r\n      <Dropdown.Toggle>\r\n        Oscillator: <b>{oscSelection}</b>\r\n      </Dropdown.Toggle>\r\n\r\n      <Dropdown.Menu>\r\n        {oscTypes.map(osc => (\r\n          <Dropdown.Item eventKey={osc} key={osc}>\r\n            {osc}\r\n          </Dropdown.Item>\r\n        ))}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n}\r\n\r\nOscillatorDropdown.propTypes = {\r\n  setOscSelection: PropTypes.func.isRequired,\r\n  oscSelection: PropTypes.string.isRequired,\r\n  oscTypes: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default OscillatorDropdown;","import React from 'react';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Allows user to set the bounds of min/max MIDI values for sonification\r\n * \r\n * @param {func} handleInput     function to handle numerical state change\r\n * @param {func} setMinMidiPitch function that sets min MIDI value state\r\n * @param {func} setMaxMidiPitch function that sets max MIDI value state\r\n */\r\nfunction MinMaxMidiInput({handleInput, setMinMidiPitch, setMaxMidiPitch}) {\r\n  return (\r\n    <div>\r\n      {/* Min MIDI pitch input */}\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Minimum MIDI pitch</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <FormControl \r\n          placeholder='Ex: 0'\r\n          aria-label='Minimum MIDI pitch'\r\n          onChange={\r\n            (event) => handleInput(event, setMinMidiPitch)\r\n          }\r\n        />\r\n      </InputGroup>\r\n\r\n      {/* Max MIDI pitch input */}\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Maximum MIDI pitch</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <FormControl\r\n          placeholder='Ex: 127'\r\n          aria-label='Maximum MIDI pitch'\r\n          onChange={\r\n            (event) => handleInput(event, setMaxMidiPitch)\r\n          }\r\n        />\r\n      </InputGroup>\r\n    </div>\r\n  );\r\n}\r\n\r\nMinMaxMidiInput.propTypes = {\r\n  handleInput: PropTypes.func.isRequired,\r\n  setMinMidiPitch: PropTypes.func.isRequired,\r\n  setMaxMidiPitch: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default MinMaxMidiInput;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\n\r\nfunction ScaleDropdown({scales, scaleSelection, setScaleSelection}) {\r\n  return (\r\n    <Dropdown onSelect={(newScaleKey) => {\r\n      setScaleSelection(newScaleKey)\r\n    }}>\r\n      <Dropdown.Toggle>\r\n        Scale: <b>{scales[scaleSelection].name}</b>\r\n      </Dropdown.Toggle>\r\n\r\n      <Dropdown.Menu>\r\n        {Object.values(scales).map(scale => (\r\n          <Dropdown.Item eventKey={scale.key} key={scale.key}>\r\n            {scale.name}\r\n          </Dropdown.Item>\r\n        ))}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n}\r\n\r\nScaleDropdown.propTypes = {\r\n  scales: PropTypes.object.isRequired,\r\n  scaleSelection: PropTypes.string.isRequired,\r\n  setScaleSelection: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ScaleDropdown;","import React, {useState, useRef, useEffect} from 'react';\r\nimport './App.css';\r\n\r\n// Tone.js imports\r\nimport * as Tone from 'tone';\r\n\r\n// React-Bootstrap imports\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\n// Function imports\r\nimport FetchOwidData from './data/FetchOwidData';\r\nimport getMinMax from './util/getMinMax';\r\nimport mapData from './util/mapData';\r\nimport quantizeNote from './util/quantizeNote';\r\n\r\n// Components\r\nimport RegionDropdown from './components/regionDropdown';\r\nimport DataDropdown from './components/DataDropdownClass';\r\nimport DataVisualization from './components/DataVisualization';\r\nimport BpmInput from './components/BpmInput';\r\nimport OscillatorDropdown from './components/OscillatorDropdown';\r\nimport MinMaxMidiInput from './components/MinMaxMidiInput';\r\nimport ScaleDropdown from './components/ScaleDropdown';\r\n\r\n// Default BPM\r\nconst defaultBpm = 999;\r\n\r\n// Default MIDI parameters\r\nconst defaultMinMidi = 36;\r\nconst defaultMaxMidi = 96;\r\n\r\n// Default oscillator selection\r\nconst defaultOscSelection = 'triangle';\r\n\r\nconst defaultRegion = 'World';\r\nconst defaultVolume = -5; // in dB\r\nconst minVolume = -30;\r\nconst maxVolume = 0;\r\n\r\n// All oscillator types\r\nconst oscTypes = [\r\n  'sine',\r\n  'triangle',\r\n  'square',\r\n  'sawtooth',\r\n];\r\n\r\n// Scales\r\nconst scales = {\r\n  chromatic: {\r\n    key: 'chromatic',\r\n    name: 'Chromatic',\r\n    scale: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\r\n  },\r\n  major: {\r\n    key: 'major',\r\n    name: 'Major',\r\n    scale: [0, 2, 4, 5, 7, 9, 11]\r\n  },\r\n  minor: {\r\n    key: 'minor',\r\n    name: 'Minor',\r\n    scale: [0, 2, 3, 5, 7, 8, 10]\r\n  },\r\n  pentatonic: {\r\n    key: 'pentatonic',\r\n    name: 'Pentatonic',\r\n    scale: [0, 2, 4, 7, 9]\r\n  },\r\n  wholeTone: {\r\n    key: 'wholeTone',\r\n    name: 'Whole tone',\r\n    scale: [0, 2, 4, 6, 8, 10]\r\n  }\r\n};\r\n\r\n// Default scale selection\r\nconst defaultScaleSelection = 'chromatic';\r\n\r\n// URL to fetch data\r\nconst defaultUrl = 'https://covid.ourworldindata.org/data/ecdc/total_cases.csv';\r\n\r\n// All data\r\nconst datasets = [\r\n  {\r\n    title: 'Total cases',\r\n    url: 'https://covid.ourworldindata.org/data/ecdc/total_cases.csv',\r\n  },\r\n  {\r\n    title: 'Total deaths',\r\n    url: 'https://covid.ourworldindata.org/data/ecdc/total_deaths.csv'\r\n  },\r\n  {\r\n    title: 'New cases',\r\n    url: 'https://covid.ourworldindata.org/data/ecdc/new_cases.csv',\r\n  },\r\n  {\r\n    title: 'New deaths',\r\n    url: 'https://covid.ourworldindata.org/data/ecdc/new_deaths.csv'\r\n  }\r\n];\r\n\r\nfunction App() {\r\n  // Data state variables\r\n  const [{ data, regions, isLoading, isError }, fetchData] = FetchOwidData(defaultUrl);\r\n  const [dataset, setDataset] = useState(defaultUrl);\r\n  const [region, setRegion] = useState(defaultRegion);\r\n  const [regionData, setRegionData] = useState([]);\r\n  const [minAmount, setMinAmount] = useState(0);\r\n  const [maxAmount, setMaxAmount] = useState(0);\r\n  const [displayViz, setVisualize] = useState(true);\r\n  const [doAnimation, setAnimation] = useState(true);\r\n  const [currentAmt, setCurrentAmt] = useState(Number.MAX_SAFE_INTEGER);\r\n  const [currentDate, setCurrentDate] = useState('');\r\n  const [playbackData, setPlaybackData] = useState([]);\r\n\r\n  // Sonification state variables\r\n  const [synthVolume, setSynthVolume] = useState(-5);  // in dB\r\n  const [oscSelection, setOscSelection] = useState(defaultOscSelection);\r\n  const [minMidiPitch, setMinMidiPitch] = useState(defaultMinMidi);\r\n  const [maxMidiPitch, setMaxMidiPitch] = useState(defaultMaxMidi);\r\n  const [bpm, setBpm] = useState(defaultBpm);\r\n  const [scaleSelection, setScaleSelection] = useState(defaultScaleSelection);\r\n  const [inPlayback, setInPlayback] = useState(false);\r\n  const [useChorus, setUseChorus] = useState(false);\r\n  const [useDist, setUseDist] = useState(false);\r\n  const [useJCRev, setUseJCRev] = useState(false);\r\n  const [useFreeverb, setUseFreeverb] = useState(false);\r\n  const [useAutoWah, setUseAutoWah] = useState(false);\r\n\r\n  // Synth using React Hooks\r\n  // https://github.com/Tonejs/Tone.js/wiki/Using-Tone.js-with-React-or-Vue\r\n  const synth = useRef(null);\r\n\r\n  // Initialize synth\r\n  useEffect(() => {\r\n    // Set oscillator type and initialize synth\r\n    const options = {oscillator: {\r\n      type: oscSelection,\r\n      volume: synthVolume,\r\n    }};\r\n\r\n    // Effects\r\n    const dist = new Tone.Distortion(1).toMaster();  // 0-1\r\n    const jcrev = new Tone.JCReverb(0.5).toMaster();  // 0-1\r\n    const freeverb = new Tone.Freeverb(0.75).toMaster();  // 0-1,freq\r\n    // These settings I'm taking straight from the Tone.js docs\r\n    const chorus = new Tone.Chorus(4, 2.5, 0.5).toMaster();\r\n    const autoWah = new Tone.AutoWah(50, 6, -30).toMaster();\r\n    autoWah.Q.value = 10;\r\n\r\n    synth.current = new Tone.Synth(options);\r\n\r\n    if (useDist) synth.current.connect(dist);\r\n    if (useChorus) synth.current.connect(chorus);\r\n    if (useFreeverb) synth.current.connect(freeverb);\r\n    if (useJCRev) synth.current.connect(jcrev);\r\n    if (useAutoWah) synth.current.connect(autoWah);\r\n\r\n    synth.current.toMaster();\r\n    \r\n  }, [oscSelection, synthVolume, useDist, useChorus, useFreeverb, useJCRev, useAutoWah]);\r\n\r\n  // Continually initialize region data on startup until data is loaded\r\n  // FIXME: tacky solution to load the graph on app startup, is there a better way to do this?\r\n  useEffect(() => {\r\n    if (regionData.length > 0) return;\r\n    initializeRegion(region);\r\n  });\r\n\r\n\r\n  /**\r\n   * Updates state variables with region from dropdown\r\n   * @param {string} selectedRegion region from dropdown component\r\n   */\r\n   function initializeRegion(selectedRegion) {\r\n    setRegion(selectedRegion);\r\n    initializeRegionData(selectedRegion);\r\n  };\r\n\r\n  /**\r\n   * Sets region data and min/max pitches using region data\r\n   * @param {string} newRegion selected region from dropdown\r\n   */\r\n  function initializeRegionData(newRegion) {\r\n    // console.log('init region data');\r\n    let selectedRegionData = [];\r\n    let amounts = [];\r\n\r\n    // Populate region data and amounts\r\n    let key = 0;\r\n    for (var line of data) {\r\n      selectedRegionData.push(\r\n        { \r\n          date: line['date'], \r\n          amount: parseInt(line[newRegion]),\r\n          index: key++\r\n        }\r\n      );\r\n      \r\n      amounts.push(parseInt(line[newRegion])); \r\n    }\r\n\r\n    selectedRegionData.filter(entry => !isNaN(entry.amount));\r\n    setRegionData(selectedRegionData);\r\n    \r\n    let minMax = getMinMax(amounts.filter(\r\n      amount => !isNaN(amount)\r\n    ));\r\n\r\n    setMinAmount(minMax.min);\r\n    setMaxAmount(minMax.max);\r\n  };\r\n\r\n  /**\r\n   * Maps a point of data to a MIDI note using min/max amounts kept in state\r\n   * @param {number} amount data to map\r\n   * @returns {number} MIDI note\r\n   */\r\n  function convertEntryToMidi(amount) {\r\n    let mapped = mapData(minAmount, maxAmount, minMidiPitch, maxMidiPitch, amount);\r\n    let midi = Math.floor(mapped);\r\n    return midi;\r\n  }\r\n\r\n  /**\r\n   * Sonifies data of selected region\r\n   */\r\n  function sonifyData() {\r\n    setInPlayback(true);\r\n\r\n    Tone.Transport.cancel();  // stops previous loop\r\n\r\n    // Map region data to objects { note, index }\r\n    const notes = regionData.map(entry => ({\r\n      note: convertEntryToMidi(entry.amount),\r\n      date: entry.date,\r\n      index: entry.index,\r\n    })).filter(entry => !isNaN(entry.note));\r\n    \r\n    // Quantize notes according to scale (can't do this within convertEntryToMidi for some reason...)\r\n    const quantizedNotes = notes.map(entry => ({\r\n      ...entry,\r\n      note: quantizeNote(entry.note, scales[scaleSelection].scale)\r\n    }));\r\n\r\n    // Set up pattern to play data\r\n    var pattern = new Tone.Pattern((time, entry) => {\r\n      synth.current.triggerAttackRelease(Tone.Frequency(entry.note, 'midi'), 0.25);\r\n      \r\n      setCurrentAmt(regionData[entry.index].amount);\r\n      setCurrentDate(entry.date);\r\n      playbackData.push(regionData[entry.index]);\r\n      setPlaybackData(playbackData);\r\n\r\n      // Stop playback when finished\r\n      if (pattern.index === pattern.values.length - 1) {\r\n        setInPlayback(false);\r\n        setPlaybackData([]);\r\n        Tone.Transport.cancel();\r\n      }\r\n    }, quantizedNotes);\r\n    \r\n    pattern.start(0);\r\n    Tone.Transport.bpm.value = bpm;\r\n\r\n    Tone.Transport.start();\r\n  }\r\n\r\n  /**\r\n   * Sanitizes region data for visualiation in react-vis\r\n   * @param {Array} regionData region data containing objects { date, amount, index }\r\n   * @returns {Array} an array of objects { x, y, color }\r\n   */\r\n  function sanitizeData(regionData) {\r\n    const data = regionData.filter(entry => !isNaN(entry.amount)).map(\r\n      entry => ({\r\n        x: entry.index,\r\n        y: entry.amount,\r\n        color: entry.amount === currentAmt ? 0 : 1,\r\n      })\r\n    );\r\n    \r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Plays the given MIDI note using the synth and its current settings\r\n   * @param {number} midiNote \r\n   */\r\n  function playMidiNote(midiNote) {\r\n    synth.current.triggerAttackRelease(Tone.Frequency(midiNote, 'midi'), '8n');\r\n  }  \r\n\r\n  /**\r\n   * Handles numerical input for visualization/sonification parameters (state)\r\n   * Insures only numerical inputs are processed\r\n   * \r\n   * @param {Object} event event from React-Bootstrap form input \r\n   * @param {Function} setStateFunction function to set state with new event value\r\n   */\r\n  function handleInput(event, setStateFunction) {\r\n    let newValue = parseInt(event.target.value);\r\n    if (isNaN(newValue)) {\r\n      return;\r\n    }\r\n    setStateFunction(newValue);\r\n  }\r\n\r\n  /**\r\n   * Render\r\n   */\r\n  return (\r\n    <div className='body'>\r\n      <h1>COVID-19 Data Sonification</h1>\r\n\r\n      {/* Data information */}\r\n      <h3>Display data:</h3>\r\n      <p>{isLoading ? 'Loading data...' : null}</p>\r\n      <p>{isError ? 'An error occurred.' : null}</p>\r\n      \r\n      <p>Min/max amount: {minAmount}/{maxAmount}</p>\r\n      <p>Current amount: {currentAmt === Number.MAX_SAFE_INTEGER ? 'None' : `${currentAmt} cases at ${currentDate}`}</p>\r\n      <p>Dataset URL: {dataset === '' ? 'None' : dataset}</p>\r\n\r\n      <h4>Current region: {region}</h4>\r\n      \r\n      <ButtonGroup>\r\n        \r\n        <RegionDropdown \r\n          regions={regions} \r\n          callback={initializeRegion}\r\n          currentRegionName={region}\r\n        />\r\n\r\n        <DataDropdown\r\n          currentDatasetName={datasets.find(dset => dset.url === dataset).title}\r\n          datasets={datasets}\r\n          setDataset={setDataset}\r\n          fetchData={fetchData}\r\n          region={region}\r\n          initializeRegion={initializeRegion}\r\n          waitTime={600}\r\n        />\r\n\r\n        <Button onClick={() => setVisualize(!displayViz)}>\r\n          {`Visualization: ${displayViz ? 'on' : 'off'}`}\r\n        </Button>\r\n        \r\n        <Button onClick={() => setAnimation(!doAnimation)}>\r\n          {`Animation: ${doAnimation ? 'on' : 'off'}`}\r\n        </Button>\r\n      \r\n      </ButtonGroup>\r\n\r\n      {/* Play/stop buttons when region data is selected */}\r\n      {regionData.length !== 0 && \r\n        (\r\n          <ButtonGroup>\r\n            <Button \r\n              variant='success' \r\n              onClick={() => {\r\n                Tone.Transport.cancel();\r\n                sonifyData();\r\n              }}\r\n            >\r\n              Play\r\n            </Button>\r\n\r\n            <Button \r\n              variant='danger' \r\n              onClick={() => {\r\n                Tone.Transport.cancel();\r\n                setPlaybackData([]);\r\n                setInPlayback(false);\r\n              }}\r\n            >\r\n              Stop\r\n            </Button>\r\n          </ButtonGroup>\r\n        )\r\n      }\r\n\r\n      {/* Data visualization */}\r\n      <div className=\"dataViz\">\r\n        {displayViz && <DataVisualization \r\n          animate={doAnimation}\r\n          axisLeft={{\r\n            legend: datasets.find(d => d.url === dataset).title,\r\n            legendOffset: 10,\r\n            format: '.2s'\r\n          }}\r\n          data={[{\r\n            id: region, \r\n            data: inPlayback ? sanitizeData(playbackData) : sanitizeData(regionData)\r\n          }]}\r\n          onClick={(point, event) => {\r\n            if (point === undefined) return;\r\n            playMidiNote( quantizeNote( convertEntryToMidi(point.data.y), scales[scaleSelection].scale ) );\r\n          }}\r\n          onMouseMove={(point, event) => {\r\n            // Don't set current amount/date through mouse if in playback\r\n            if (point === undefined || inPlayback) return;\r\n            setCurrentAmt(point.data.y)\r\n            setCurrentDate(regionData[point.data.x].date)\r\n          }}\r\n        />}\r\n      </div>\r\n\r\n      { /* Sonification parameters */}\r\n      <h3>Options:</h3>\r\n      \r\n      {/* React bootstrap slider */}\r\n      <Form >\r\n        <Form.Label>Synth Volume (in dB)</Form.Label>\r\n        <Form.Control type=\"range\" defaultValue={mapData(minVolume, maxVolume, 0, 100, defaultVolume)} onChange={(event) => {\r\n          const newValue = event.target.value;  // dB\r\n          const newVolume = mapData(0, 100, minVolume, maxVolume, newValue);\r\n          setSynthVolume(newVolume);\r\n        }} />\r\n      </Form>\r\n      \r\n      <ButtonGroup>\r\n        <OscillatorDropdown \r\n          setOscSelection={setOscSelection}\r\n          oscSelection={oscSelection}\r\n          oscTypes={oscTypes}\r\n        />\r\n\r\n        <ScaleDropdown\r\n          scales={scales}\r\n          scaleSelection={scaleSelection}\r\n          setScaleSelection={setScaleSelection}\r\n        />\r\n      </ButtonGroup>\r\n      <br />\r\n\r\n      <ButtonGroup>\r\n        <Button variant={useDist ? 'primary' : 'outline-primary'} onClick={() => setUseDist(!useDist)}>\r\n          Distortion: <b>{useDist ? 'enabled' : 'disabled'}</b>\r\n        </Button>\r\n        <Button variant={useChorus ? 'primary' : 'outline-primary'} onClick={() => setUseChorus(!useChorus)}>\r\n          Chorus: <b>{useChorus ? 'enabled' : 'disabled'}</b>\r\n        </Button>\r\n        <Button variant={useFreeverb ? 'primary' : 'outline-primary'} onClick={() => setUseFreeverb(!useFreeverb)}>\r\n          Freeverb: <b>{useFreeverb ? 'enabled' : 'disabled'}</b>\r\n        </Button>\r\n        <Button variant={useJCRev ? 'primary' : 'outline-primary'} onClick={() => setUseJCRev(!useJCRev)}>\r\n          JCReverb: <b>{useJCRev ? 'enabled' : 'disabled'}</b>\r\n        </Button>\r\n        <Button variant={useAutoWah ? 'primary' : 'outline-primary'} onClick={() => setUseAutoWah(!useAutoWah)}>\r\n          AutoWah: <b>{useAutoWah ? 'enabled' : 'disabled'}</b>\r\n        </Button>\r\n      </ButtonGroup>\r\n\r\n      <br />\r\n      <br />\r\n\r\n      <MinMaxMidiInput\r\n        handleInput={handleInput}\r\n        setMinMidiPitch={setMinMidiPitch}\r\n        setMaxMidiPitch={setMaxMidiPitch}\r\n      />\r\n      <p>\r\n        Min/max MIDI pitch: <strong>[{minMidiPitch}, {maxMidiPitch}]</strong>\r\n      </p>\r\n\r\n      {/* BPM input */}\r\n      <BpmInput bpm={bpm} setBpm={setBpm} handleInput={handleInput} />\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';  // React-Bootstrap CSS dependency\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}